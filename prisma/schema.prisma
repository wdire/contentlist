generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String    @id @default(cuid())
  username   String    @unique
  email      String    @unique
  imageUrl   String?
  List       List[]
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model List {
  id              Int           @id @default(autoincrement())
  name            String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  private         Boolean       @default(false)
  edited          Boolean       @default(false)
  //
  copiedFrom      List?         @relation("ListCopyHistory", fields: [copiedFromId], references: [id])
  copiedFromId    Int?
  listsCopiedThis List[]        @relation("ListCopyHistory")
  //
  ListInTopic     ListInTopic[]

  cloudinaryImage   CloudinaryImage? @relation(fields: [cloudinaryImageId], references: [id])
  cloudinaryImageId String?          @unique

  // Contents inside created image
  // (source):(source_id),(source):(source_id),...
  imageContents String?
  //
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt

  /// [ListData]
  contentsData Json
}

model Topic {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  ListInTopic ListInTopic[]
}

model ListInTopic {
  list    List  @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId  Int
  index   Int?
  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int

  @@id(name: "id_listInTopic", [topicId, listId])
  @@unique([topicId, index])
}

model CloudinaryImage {
  id         String    @id @default(cuid())
  publicId   String    @unique
  format     String
  version    String
  List       List?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}
